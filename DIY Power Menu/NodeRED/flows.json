[{"id":"48497fa5.7b69d","type":"tab","label":"Tasker Power Tiles","disabled":false,"info":"\n![enter image description here](https://notenoughtech.com/wp-content/uploads/2021/05/print1.jpg)\nTaking Power Tiles from Android11 offline so you can add any devices from your DIY Smart Home. No could requirement, but with WAN and LAN controls\n\n - [Complete instructions](https://notenoughtech.com/tasker/power-menu-for-your-diy-smart-home/)\n\n**Features**:\n-   ✅ Display devices from multiple ecosystems\n-   ✅ Add devices without cloud integration\n-   ✅ Make personal shortcuts\n-   ✅ Display custom information\n-   ✅ Update existing tiles\n-   ✅ LAN & WAN controls\n-   ❌ Automatically add/remove active tiles\n\n\n## Requirements\n\n - node-red-dashboard\n - node-red-contrib-joinapp\n - [Tasker Project](https://taskernet.com/shares/?user=AS35m8mukRNi0KvTv9JF6LyKMewcG%2BW7EzpF3a%2FGvwJJTFwWQ1%2BU3QCMEmxTS%2F07urNK%2FTAL&id=Project%3APower+Tiles)\n \n optional:\n - node-red-contrib-smartnora\n - node-red-contrib-alexa-cakebaked\n\n\n# Settings\n\nEach tile needs a set of connected nodes to work. These nodes are universal and will work with any tile type. Make sure tiles have unique ID assigned.\n\n - **Prep Response** - Check \"on Start\" tab and add Join devices by name\n - **Tiles** - add individual command for each tile as outlined in the article\n \n ## More about me:\n\nIf you want to get the latest updates to this project you can follow me via your preferred social media:\n\n-   [Facebook](https://www.facebook.com/NotEnoughTECH/)\n-   [Twitter](https://twitter.com/NotEnoughTECH)\n-   [Instagram](https://www.instagram.com/notenoughtech/)\n-   [YouTube](https://www.youtube.com/user/Polepositionpage)\n\nAnd if you feeling like buying me a coffee or supporting me in a more continuous way:\n\n-   [Paypal](https://www.paypal.me/notenoughtech)\n-   [Patreon](https://www.patreon.com/NotEnoughTECH)\n\nI hope you have enjoyed the project!\n"},{"id":"899dbad7.63c568","type":"group","z":"48497fa5.7b69d","name":"Working Principle","style":{"label":true},"nodes":["cf58c6c8.1d2988","fe89045.b9b0df8","786d5f72.4265f","4ccd8077.441bb","85b53962.a64308","f03c1072.995fe","6c911a32.c38294","8e7a6026.1fcdf"],"x":754,"y":79,"w":1012,"h":202},{"id":"eddc23eb.83ac9","type":"group","z":"48497fa5.7b69d","name":"Range Toggle","style":{"label":true,"stroke":"#6f2fa0","fill":"#dbcbe7","label-position":"n","color":"#000000"},"nodes":["e41a634a.4bf0e","dd661140.2a98e","a3f169c2.01d238"],"x":748,"y":333,"w":1044,"h":361.5},{"id":"e41a634a.4bf0e","type":"group","z":"48497fa5.7b69d","g":"eddc23eb.83ac9","name":"Tile Processing","style":{"stroke":"#6f2fa0","fill":"#b797cf","label":true,"label-position":"n","color":"#000000"},"nodes":["3d1589e6.83e9d6","2ee13f93.83111"],"x":774,"y":571.5,"w":992,"h":97},{"id":"dd661140.2a98e","type":"group","z":"48497fa5.7b69d","g":"eddc23eb.83ac9","name":"Dashboard","style":{"label":true,"stroke":"#3f5787","fill":"#bfc7d7"},"nodes":["166c5064.e620d","8a36c6f0.f6e2f8"],"x":1374,"y":419,"w":152,"h":122},{"id":"a3f169c2.01d238","type":"group","z":"48497fa5.7b69d","g":"eddc23eb.83ac9","name":"Smart Light","style":{"stroke":"#0070c0","fill":"#bfdbef","label":true,"label-position":"n"},"nodes":["c3886649.df5f08","828a2015.8778f","65d34669.c9c118","c18c4947.5c0d98","708c9b53.d5aba4"],"x":894,"y":359,"w":432,"h":162},{"id":"cf58c6c8.1d2988","type":"function","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Tile Type - Read description inside","func":"//This function node has 3 outputs tile types output to relevant outputs\n// 1. button (usually info associated with %extra variable in Tasker)\n// 2. toggle (true/false)\n// 3. slider (number)\n\nfunction reverse(x){\n    if(x === \"true\"){return false;}\n    if(x === \"false\"){return true;}\n}\n\nfunction boolformat(y){\n    if(y === \"true\"){return true;}\n    if(y === \"false\"){return false;}\n}\n\nfunction define(z){\n    if(z === undefined){return \" \";}\n    else{return z;}\n}\n\nvar config = JSON.parse(msg.payload.config);  \nvar sourceID = msg.push.senderId;\nvar toggleReversed, toggle, rangeCurrent, tileAction \n\n\n//common tile fields - all tile share these\nvar tileType = msg.payload.tileType;\nvar tileID = config.tileID;\nvar title = config.title;\nvar subtitle = config.subtitle;\nvar icon = config.icon;\n\n//extra fields\n//toggle = msg.payload.tileStatus;\nvar taskerCommand = msg.payload.taskerCommand;\n\n\n//extra info injected by other Tasker actions in front\nvar extra = msg.payload.extra;\n\n//range config\nvar rangeMin =     define(config.range.min);\nvar rangeMax =     define(config.range.max);\nvar rangeStep =    define(config.range.step);\nvar rangeFormat =  define(config.range.format);\n\n\n//process Toggle changes\nif(tileType === \"toggle\"){\n    toggle =  boolformat(msg.payload.tileStatus);}\n\n//process range changes\nif(tileType === \"range\"){\n    rangeCurrent =  msg.payload.tileStatus;\n    toggle = true;\n}\n//process range toggle\nif(tileType === \"rangeToggle\"){\n    toggle =       msg.payload.tileStatus[0];\n    rangeCurrent = msg.payload.tileStatus[1];  //toggling rangeToggle defaults to current Range Value in Tasker\n    tileAction =   msg.payload.tileStatus[2];\n    \n    \n    //if toggle is pressed\n    if (tileAction === \"toggle\"){\n        rangeCurrent = msg.payload.tileStatus[1];\n        if(toggle === \"false\"){\n            toggle = boolformat(toggle);\n        }\n        if(toggle === \"true\" ){\n          toggle = boolformat(toggle);\n       }\n        if(toggle === \"true\" && rangeCurrent == rangeMin){\n            rangeCurrent = rangeMin + 1;\n            toggle = boolformat(toggle);\n        }\n    }\n    //if range  is changed\n    if(tileAction === \"range\"){\n        if(rangeCurrent >= rangeMin){toggle = boolformat(toggle);}\n    }\n}\n\n\n// save the tile state as ID based flow variable\n// command needs \"=:=\" replaced with \":::\"\nvar command = taskerCommand +\":::\"+ tileType +\":::\"+ JSON.stringify(config);\n\nvar data = {\"extra\":extra,\n            \"sourceID\": sourceID,\n            \"taskerCommand\": taskerCommand,\n            \"tileType\": tileType,\n            \"tileConfig\": config,\n            \"toggleState\": toggle,\n            \"rangeState\": define(rangeCurrent),\n            \"command\" : command\n        };\n        \nflow.set(tileID, data);\n\n\n\n//split outcomes based on the tile type\n\n switch(tileType){\n    case \"button\":\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.extra = extra;\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [msg, null, null];\n        \n    \n    case \"toggle\":\n        msg.payload = toggle;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, msg, null];\n        \n        \n    case \"range\":\n        msg.payload = rangeCurrent;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, null, msg];\n        \n        \n    case \"rangeToggle\":\n        if (tileAction === \"toggle\"){\n            msg.payload = toggle;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, msg, null];\n        }\n        if (tileAction === \"range\"){\n            msg.payload = rangeCurrent;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, null, msg];\n        }\n }","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":180,"wires":[["786d5f72.4265f"],["4ccd8077.441bb"],["85b53962.a64308"]]},{"id":"fe89045.b9b0df8","type":"function","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Prep response","func":"//please add sourceIDs from Join in the ON Start tab\n\nvar tile, comm, title, tileID, subtitle, icon, command, sourceID, toggle, config, rangeMin, rangeMax, rangeCurrent, rangeStep, rangeFormat, extra\n\nfunction isNumeric(value) {\n        return /^-?\\d+$/.test(value);\n    }\n    \n\n\n//Tasker -> NodeRED -> Tasker\nif(msg.inbound === true){\n    let data = context.get(\"lastTileID\");\n    tile = flow.get(msg.tileID);\n    \n    sourceID = data.sourceID;\n    var lastTileData = {\"tileID\" : msg.tileID, \"sourceID\": sourceID};\n    context.set(\"lastTileID\", lastTileData);\n    \n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         tile.tileConfig.title;\n    tileID =        msg.tileID \n    tileType =      tile.tileType;\n    subtitle =      tile.tileConfig.subtitle;\n    rangeCurrent =  tile.rangeState;\n    toggleState  =  tile.toggleState;\n    \n    icon =          tile.tileConfig.icon.off;\n    if(toggleState === true){icon = tile.tileConfig.icon.on;}\n    if(toggleState === false){icon = tile.tileConfig.icon.off;}\n    \n    command =       tile.command;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n}\n\n\n\n\n\n\n//local response NodeRED -> Tasker\nelse{\n    var lastTile = context.get(\"lastTileID\");\n    tile = flow.get(lastTile.tileID);\n    sourceID = lastTile.sourceID;\n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         tile.tileConfig.title; \n    tileType =      tile.tileType;\n    tileID  =       tile.tileConfig.tileID;\n    subtitle =      tile.tileConfig.subtitle;  \n    icon =          tile.tileConfig.icon;\n    taskerCommand = tile.taskerCommand;\n    extra =         tile.extra;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n    \n    //checks for inputs from various dashboard elements\n  \n    if(tileType === \"button\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n        if(toggleState === true){\n            icon = tile.tileConfig.icon.on;\n            subtitle = \"online\";\n        }\n        if(toggleState === false){\n            icon = tile.tileConfig.icon.off;\n            subtitle = \"offline\";\n        }\n    }\n    \n    if(tileType === \"toggle\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n            // toggling icons on tile\n        if(toggleState=== true){\n            icon =          tile.tileConfig.icon.on;\n        } \n        if(toggleState=== false){\n            icon =          tile.tileConfig.icon.off;\n        }\n    }\n    \n    \n    \n    if(tileType === \"range\"){\n        toggleState =   tile.toggleState;\n        rangeCurrent =  msg.payload;\n    }\n    \n    \n    \n    if(tileType === \"rangeToggle\"){\n        if(msg.payload === true){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.on;\n        } \n        if(msg.payload === false){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.off;\n        }\n        if(isNumeric(msg.payload)){\n            node.warn(\"triggered nums \" + msg.payload);\n            rangeCurrent =  msg.payload;\n            toggleState =   true;\n            icon = tile.tileConfig.icon.on;\n        }\n    }\n    \n    //save changes made via nodeRED and update the context\n    command = taskerCommand +\":::\"+ tileType +\":::\"+ JSON.stringify(config);\n    \n    var data = {\"extra\": extra,\n                \"sourceID\": sourceID,\n                \"taskerCommand\": taskerCommand,\n                \"tileType\": tileType,\n                \"tileConfig\": config,\n                \"toggleState\": toggleState,\n                \"rangeState\": rangeCurrent,\n                \"command\" : command\n            };\n    flow.set(tileID, data);\n}\n\n//send join push\n\ncomm = \"TileUpdate\"+\"=:=\"+ tileType +\"=:=\"+ tileID +\"=:=\"+ title +\"=:=\"+ subtitle +\"=:=\"+ icon +\"=:=\"+ command+\"=:=\"+toggleState +\"=:=\"+ rangeMin+ \"=:=\"+ rangeMax +\"=:=\"+ rangeCurrent +\"=:=\"+rangeStep+\"=:=\"+ rangeFormat;\n\nmsg.push = {\"devices\" : sourceID, \"text\": comm};\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"///Visit https://joinjoaomgcd.appspot.com/ to get your Join API ID\n//name devices here \nvar sourceID = \"Mi 11,Pixel 3\";\n\n//specify the tile \nvar data = {\"tileID\": \"button\", \"sourceID\": sourceID }; \ncontext.set(\"lastTileID\", data);\n","finalize":"","libs":[],"x":1600,"y":180,"wires":[[]]},{"id":"786d5f72.4265f","type":"debug","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Custom Info","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1230,"y":120,"wires":[]},{"id":"4ccd8077.441bb","type":"debug","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"true/false","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1220,"y":180,"wires":[]},{"id":"85b53962.a64308","type":"debug","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Number","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1220,"y":240,"wires":[]},{"id":"f03c1072.995fe","type":"inject","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"true/false","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1420,"y":160,"wires":[["fe89045.b9b0df8"]]},{"id":"6c911a32.c38294","type":"inject","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Number","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1410,"y":220,"wires":[["fe89045.b9b0df8"]]},{"id":"8e7a6026.1fcdf","type":"comment","z":"48497fa5.7b69d","g":"899dbad7.63c568","name":"Check \"On Start\"","info":"","x":1660,"y":140,"wires":[]},{"id":"65d34669.c9c118","type":"mqtt out","z":"48497fa5.7b69d","g":"a3f169c2.01d238","name":"Light 2","topic":"zigbee2mqtt/IkeaCT1/set","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"6e117ba5.8026e4","x":1210,"y":420,"wires":[]},{"id":"828a2015.8778f","type":"function","z":"48497fa5.7b69d","g":"a3f169c2.01d238","name":"Format","func":"var val = msg.payload;\nvar brightness = (val *255)/100;\n\nmsg.payload = {\"brightness\": brightness};\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":980,"y":440,"wires":[["65d34669.c9c118"]]},{"id":"c3886649.df5f08","type":"change","z":"48497fa5.7b69d","g":"a3f169c2.01d238","name":"Format","rules":[{"t":"change","p":"payload","pt":"msg","from":"true","fromt":"bool","to":"ON","tot":"str"},{"t":"change","p":"payload","pt":"msg","from":"false","fromt":"bool","to":"OFF","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":400,"wires":[["65d34669.c9c118"]]},{"id":"6428652c.9a707c","type":"join-receive-message","z":"48497fa5.7b69d","name":"","command":"PT","variables":"extra,taskerCommand,tileID,config,tileStatus","parseNumbers":true,"server":"bb9737a3.bbb4d8","x":510,"y":620,"wires":[["3be8c3bb.da354c"]]},{"id":"166c5064.e620d","type":"ui_slider","z":"48497fa5.7b69d","g":"dd661140.2a98e","name":"","label":"Range","tooltip":"","group":"5a2c927c.ba1edc","order":2,"width":0,"height":0,"passthru":true,"outs":"end","topic":"","topicType":"str","min":0,"max":"100","step":1,"x":1450,"y":500,"wires":[["2ee13f93.83111"]]},{"id":"8a36c6f0.f6e2f8","type":"ui_switch","z":"48497fa5.7b69d","g":"dd661140.2a98e","name":"","label":"{{msg.label}}","tooltip":"","group":"5a2c927c.ba1edc","order":1,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","topicType":"str","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","animate":false,"x":1450,"y":460,"wires":[["2ee13f93.83111"]]},{"id":"3d1589e6.83e9d6","type":"function","z":"48497fa5.7b69d","g":"e41a634a.4bf0e","name":"Tile Type - Read description inside","func":"//This function node has 3 outputs tile types output to relevant outputs\n// 1. button (usually carries extra info associated with %extra variable in Tasker)\n// 2. toggle (true/false)\n// 3. slider (number)\n// connect appropriate outputs to receive values from tiles\n\nfunction reverse(x){\n    if(x === \"true\"){return false;}\n    if(x === \"false\"){return true;}\n}\n\nfunction boolformat(y){\n    if(y === \"true\"){return true;}\n    if(y === \"false\"){return false;}\n}\n\nfunction define(z){\n    if(z === undefined){return \" \";}\n    else{return z;}\n}\n\nvar config = JSON.parse(msg.payload.config);  \nvar sourceID = msg.push.senderId;\nvar toggleReversed, toggle, rangeCurrent, tileAction \n\n\n//common tile fields - all tile share these\nvar tileType = config.tileType;\nvar tileID = msg.payload.tileID;\nvar title = config.title;\nvar subtitle = config.subtitle;\nvar icon = config.icon;\n\n//extra fields\n//toggle = msg.payload.tileStatus;\nvar taskerCommand = msg.payload.taskerCommand;\n\n\n//extra info injected by other Tasker actions in front\nvar extra = msg.payload.extra;\n\n//range config\nvar rangeMin =     define(config.range.min);\nvar rangeMax =     define(config.range.max);\nvar rangeStep =    define(config.range.step);\nvar rangeFormat =  define(config.range.format);\n\n\n//process Toggle changes\nif(tileType === \"toggle\"){\n    toggle =  boolformat(msg.payload.tileStatus);}\n\n//process range changes\nif(tileType === \"range\"){\n    rangeCurrent =  msg.payload.tileStatus;\n    toggle = true;\n}\n//process range toggle\nif(tileType === \"rangeToggle\"){\n    toggle =       msg.payload.tileStatus[0];\n    rangeCurrent = msg.payload.tileStatus[1];  //toggling rangeToggle defaults to current Range Value in Tasker\n    tileAction =   msg.payload.tileStatus[2];\n    \n    \n    //if toggle is pressed\n    if (tileAction === \"toggle\"){\n        rangeCurrent = msg.payload.tileStatus[1];\n        if(toggle === \"false\"){\n            toggle = boolformat(toggle);\n        }\n        if(toggle === \"true\" ){\n          toggle = boolformat(toggle);\n       }\n        if(toggle === \"true\" && rangeCurrent == rangeMin){\n            rangeCurrent = rangeMin + 1;\n            toggle = boolformat(toggle);\n        }\n    }\n    //if range  is changed\n    if(tileAction === \"range\"){\n        if(rangeCurrent >= rangeMin){toggle = boolformat(toggle);}\n    }\n}\n\n\n// save the tile state as ID based flow variable\n// command needs \"=:=\" replaced with \":::\"\nvar command = taskerCommand +\":::\"+ tileType +\":::\"+ JSON.stringify(config);\n\nvar data = {\"extra\":extra,\n            \"sourceID\": sourceID,\n            \"taskerCommand\": taskerCommand,\n            \"tileType\": tileType,\n            \"tileConfig\": config,\n            \"tileID\": tileID,\n            \"toggleState\": toggle,\n            \"rangeState\": define(rangeCurrent),\n            \"command\" : command\n        };\n        \nflow.set(tileID, data);\n\n\n\n//split outcomes based on the tile type\n\n switch(tileType){\n    case \"button\":\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.extra = extra;\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [msg, null, null];\n        \n    \n    case \"toggle\":\n        msg.payload = toggle;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, msg, null];\n        \n        \n    case \"range\":\n        msg.payload = rangeCurrent;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, null, msg];\n        \n        \n    case \"rangeToggle\":\n        if (tileAction === \"toggle\"){\n            msg.payload = toggle;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, msg, null];\n        }\n        if (tileAction === \"range\"){\n            msg.payload = rangeCurrent;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, null, msg];\n        }\n }","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":620,"wires":[[],["8a36c6f0.f6e2f8","c3886649.df5f08"],["166c5064.e620d","828a2015.8778f"]]},{"id":"2ee13f93.83111","type":"function","z":"48497fa5.7b69d","g":"e41a634a.4bf0e","name":"Prep response","func":"//please add sourceIDs from Join in the ON Start tab\n\nvar tile, comm, title, tileID, subtitle, icon, command, sourceID, toggle, config, rangeMin, rangeMax, rangeCurrent, rangeStep, rangeFormat, extra\n\nfunction isNumeric(value) {\n        return /^-?\\d+$/.test(value);\n    }\n    \n\n\n//Tasker -> NodeRED -> Tasker\nif(msg.inbound === true){\n    let data = context.get(\"lastTileID\");\n    tile = flow.get(msg.tileID);\n    \n    sourceID = data.sourceID;\n    var lastTileData = {\"tileID\" : msg.tileID, \"sourceID\": sourceID};\n    context.set(\"lastTileID\", lastTileData);\n    \n\n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         tile.tileConfig.title;\n    tileID =        msg.tileID \n    tileType =      tile.tileConfig.tileType;\n    subtitle =      tile.tileConfig.subtitle;\n    rangeCurrent =  tile.rangeState;\n    toggleState  =  tile.toggleState;\n    \n    icon =          tile.tileConfig.icon.off;\n    if(toggleState === true){icon = tile.tileConfig.icon.on;}\n    if(toggleState === false){icon = tile.tileConfig.icon.off;}\n    command =       tile.command;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n    node.warn(tile);\n}\n\n\n\n\n\n\n//local response NodeRED -> Tasker\nelse{\n    var lastTile = context.get(\"lastTileID\");\n    tile = flow.get(lastTile.tileID);\n    sourceID = lastTile.sourceID;\n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         tile.tileConfig.title; \n    tileType =      tile.tileType;\n    tileID  =       tile.tileID;\n    subtitle =      tile.tileConfig.subtitle;  \n    icon =          tile.tileConfig.icon;\n    taskerCommand = tile.taskerCommand;\n    extra =         tile.extra;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n    \n    //checks for inputs from various dashboard elements\n  \n    if(tileType === \"button\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n        if(toggleState === true){\n            icon = tile.tileConfig.icon.on;\n            subtitle = \"online\";\n        }\n        if(toggleState === false){\n            icon = tile.tileConfig.icon.off;\n            subtitle = \"offline\";\n        }\n    }\n    \n    if(tileType === \"toggle\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n            // toggling icons on tile\n        if(toggleState=== true){\n            icon =          tile.tileConfig.icon.on;\n        } \n        if(toggleState=== false){\n            icon =          tile.tileConfig.icon.off;\n        }\n    }\n    \n    \n    \n    if(tileType === \"range\"){\n        toggleState =   tile.toggleState;\n        rangeCurrent =  msg.payload;\n    }\n    \n    \n    \n    if(tileType === \"rangeToggle\"){\n        if(msg.payload === true){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.on;\n        } \n        if(msg.payload === false){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.off;\n        }\n        if(isNumeric(msg.payload)){\n            node.warn(\"triggered nums \" + msg.payload);\n            rangeCurrent =  msg.payload;\n            toggleState =   true;\n            icon = tile.tileConfig.icon.on;\n        }\n    }\n    \n    //save changes made via nodeRED and update the context\n    command = taskerCommand +\":::\"+ tileID +\":::\"+ JSON.stringify(config);\n    \n    var data = {\"extra\": extra,\n                \"sourceID\": sourceID,\n                \"taskerCommand\": taskerCommand,\n                \"tileType\": tileType,\n                \"tileID\": tileID,\n                \"tileConfig\": config,\n                \"toggleState\": toggleState,\n                \"rangeState\": rangeCurrent,\n                \"command\" : command\n            };\n    flow.set(tileID, data);\n    node.warn(data);\n}\n\n\n//send join push\n\ncomm = \"TileUpdate\"+\"=:=\"+ tileType +\"=:=\"+ tileID +\"=:=\"+ title +\"=:=\"+ subtitle +\"=:=\"+ icon +\"=:=\"+ command+\"=:=\"+toggleState +\"=:=\"+ rangeMin+ \"=:=\"+ rangeMax +\"=:=\"+ rangeCurrent +\"=:=\"+rangeStep+\"=:=\"+ rangeFormat;\nnode.warn(comm);\nmsg.push = {\"devices\" : sourceID, \"text\": comm};\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"///Visit https://joinjoaomgcd.appspot.com/ to get your Join API ID\n\nvar sourceID = \"Mi 11,Pixel 3\";\n\nvar data = {\"tileID\": \"rangeToggle\", \"sourceID\": sourceID };\ncontext.set(\"lastTileID\", data); \n","finalize":"","libs":[],"x":1660,"y":620,"wires":[["a56b6e3e.409b"]]},{"id":"a56b6e3e.409b","type":"join-message","z":"48497fa5.7b69d","name":"","text":"","title":"","url":"","notificationicon":"","joinConfig":"1c0401ee.9b9bfe","x":1880,"y":620,"wires":[[]]},{"id":"c18c4947.5c0d98","type":"mqtt in","z":"48497fa5.7b69d","g":"a3f169c2.01d238","name":"Light 2","topic":"zigbee2mqtt/IkeaCT1","qos":"2","datatype":"json","broker":"6e117ba5.8026e4","nl":false,"rap":true,"rh":0,"x":1090,"y":480,"wires":[["708c9b53.d5aba4"]]},{"id":"708c9b53.d5aba4","type":"function","z":"48497fa5.7b69d","g":"a3f169c2.01d238","name":"Format","func":"var data = msg.payload;\nvar state = data.state;\nvar brightness = data.brightness;\n\nfunction calc(x){\n    return (100*x)/255;\n}\n\nif(state=== \"ON\") {state =  true;}\nif(state=== \"OFF\") {state =  false;}\n\nvar msg1 = {payload: state};\nvar msg2 = {payload: calc(brightness)};\n\n\nreturn [msg1, msg2];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":480,"wires":[["8a36c6f0.f6e2f8"],["166c5064.e620d"]]},{"id":"3be8c3bb.da354c","type":"switch","z":"48497fa5.7b69d","name":"TileID","property":"payload.tileID","propertyType":"msg","rules":[{"t":"eq","v":"rangeToggle","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":650,"y":620,"wires":[["3d1589e6.83e9d6"]]},{"id":"6e117ba5.8026e4","type":"mqtt-broker","name":"MQTT","broker":"home.lan","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"bb9737a3.bbb4d8","type":"join-server","name":"NodeRED","port":"1820","joinConfig":"1c0401ee.9b9bfe"},{"id":"5a2c927c.ba1edc","type":"ui_group","name":"Range Toggle","tab":"c45eaafe.04e718","order":null,"disp":true,"width":"6","collapse":false},{"id":"1c0401ee.9b9bfe","type":"join-config","name":"Join Config","register":true},{"id":"c45eaafe.04e718","type":"ui_tab","name":"Tasker Tiles","icon":"dashboard","disabled":false,"hidden":false}]