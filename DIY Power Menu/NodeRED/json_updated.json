[{"id":"86d6d8a3.11c8f8","type":"tab","label":"Power Menu","disabled":false,"info":""},{"id":"67a86bf2.864934","type":"group","z":"86d6d8a3.11c8f8","name":"Thermostat tile","style":{"label":true},"nodes":["1b174778.acaf99","59da964b.712e88"],"x":494,"y":71.5,"w":592,"h":97},{"id":"1b174778.acaf99","type":"function","z":"86d6d8a3.11c8f8","g":"67a86bf2.864934","name":"Tile Type - Read description inside","func":"//This function node has 3 outputs tile types output to relevant outputs\n// 1. button (usually carries extra info associated with %extra variable in Tasker)\n// 2. toggle (true/false)\n// 3. slider (number)\n// connect appropriate outputs to receive values from tiles\n\nfunction reverse(x){\n    if(x === \"true\"){return false;}\n    if(x === \"false\"){return true;}\n}\n\nfunction boolformat(y){\n    if(y === \"true\"){return true;}\n    if(y === \"false\"){return false;}\n}\n\nfunction define(z){\n    if(z === undefined){return \" \";}\n    else{return z;}\n}\n\nvar config = JSON.parse(msg.payload.config);  \nvar sourceID = msg.push.senderId;\nvar toggleReversed, toggle, rangeCurrent, tileAction \n\n\n//common tile fields - all tile share these\nvar tileType = config.tileType;\nvar tileID = msg.payload.tileID;\nvar title = config.title;\nvar subtitle = config.subtitle;\nvar icon = config.icon;\n\n//extra fields\n//toggle = msg.payload.tileStatus;\nvar taskerCommand = msg.payload.taskerCommand;\n\n\n//extra info injected by other Tasker actions in front\nvar extra = msg.payload.extra;\n\n//range config\nvar rangeMin =     define(config.range.min);\nvar rangeMax =     define(config.range.max);\nvar rangeStep =    define(config.range.step);\nvar rangeFormat =  define(config.range.format);\n\n\n//process Toggle changes\nif(tileType === \"toggle\"){\n    toggle =  boolformat(msg.payload.tileStatus);}\n\n//process range changes\nif(tileType === \"range\"){\n    rangeCurrent =  msg.payload.tileStatus;\n    toggle = true;\n}\n//process range toggle\nif(tileType === \"rangeToggle\"){\n    toggle =       msg.payload.tileStatus[0];\n    rangeCurrent = msg.payload.tileStatus[1];  //toggling rangeToggle defaults to current Range Value in Tasker\n    tileAction =   msg.payload.tileStatus[2];\n    \n    \n    //if toggle is pressed\n    if (tileAction === \"toggle\"){\n        rangeCurrent = msg.payload.tileStatus[1];\n        if(toggle === \"false\"){\n            toggle = boolformat(toggle);\n        }\n        if(toggle === \"true\" ){\n          toggle = boolformat(toggle);\n       }\n        if(toggle === \"true\" && rangeCurrent == rangeMin){\n            rangeCurrent = rangeMin + 1;\n            toggle = boolformat(toggle);\n        }\n    }\n    //if range  is changed\n    if(tileAction === \"range\"){\n        if(rangeCurrent >= rangeMin){toggle = boolformat(toggle);}\n    }\n}\n\n\n// save the tile state as ID based flow variable\n// command needs \"=:=\" replaced with \":::\"\nvar command = taskerCommand +\":::\"+ tileID +\":::\"+ JSON.stringify(config);\n\nvar data = {\"extra\":extra,\n            \"sourceID\": sourceID,\n            \"taskerCommand\": taskerCommand,\n            \"tileType\": tileType,\n            \"tileConfig\": config,\n            \"tileID\": tileID,\n            \"toggleState\": toggle,\n            \"rangeState\": define(rangeCurrent),\n            \"command\" : command\n        };\n        \nflow.set(tileID, data);\n\n\n\n//split outcomes based on the tile type\n\n switch(tileType){\n    case \"button\":\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.extra = extra;\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [msg, null, null];\n        \n    \n    case \"toggle\":\n        msg.payload = toggle;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, msg, null];\n        \n        \n    case \"range\":\n        msg.payload = rangeCurrent;\n        msg.extra = extra;\n        msg.data = {\"title\": title, \"subtitle\": subtitle};\n        msg.tileID = tileID;\n        msg.inbound = true;\n        \n        return [null, null, msg];\n        \n        \n    case \"rangeToggle\":\n        if (tileAction === \"toggle\"){\n            msg.payload = toggle;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, msg, null];\n        }\n        if (tileAction === \"range\"){\n            msg.payload = rangeCurrent;\n            msg.label = tileID;\n            msg.inbound = true;\n            msg.tileID = tileID;\n            \n            return [null, null, msg];\n        }\n }","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":120,"wires":[[],["59da964b.712e88"],["59da964b.712e88"]]},{"id":"59da964b.712e88","type":"function","z":"86d6d8a3.11c8f8","g":"67a86bf2.864934","name":"Prep response","func":"//please add sourceIDs from Join in the ON Start tab\n// there are 2 instances of the flow.set needing replacing - use the name\n//from Settings and see the commented out values\n//I moved the setup to settings node to streamline the setup\n\nvar tile, comm, title, tileID, subtitle, icon, command, sourceID, toggle, config, rangeMin, rangeMax, rangeCurrent, rangeStep, rangeFormat, extra\n\nfunction isNumeric(value) {\n        return /^-?\\d+$/.test(value);\n    }\n\n//Tasker -> NodeRED -> Tasker\n\n\n\n\nif(msg.inbound === true){\n    let data = flow.get(\"thermo\");    //replace the name with flow contect name from Settings\n    tile = flow.get(msg.tileID);\n    \n    sourceID = data.sourceID;\n    var lastTileData = {\"tileID\" : msg.tileID, \"sourceID\": sourceID};\n    context.set(\"lastTileID\", lastTileData);\n    \n\n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         \"Current Temp: \" + msg.sensorTemp;                            //set for thermostat tile\n    tileID =        msg.tileID \n    tileType =      tile.tileConfig.tileType;\n    subtitle =      tile.tileConfig.subtitle;\n    rangeCurrent =  tile.rangeState;\n    toggleState  =  tile.toggleState;\n    \n    icon =          msg.tempicon;                                                 //set for thermostat tile\n    if(toggleState === true){icon = tile.tileConfig.icon.on;}\n    if(toggleState === false){icon = tile.tileConfig.icon.off;}\n    command =       tile.command;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n    flow.set(tileID, data);\n}\n\n\n\n\n\n\n//local response NodeRED -> Tasker\nelse{\n    var lastTile = flow.get(\"thermo\");   //replace the name with flow contect name from Settings\n    tile = flow.get(lastTile.tileID);\n    sourceID = lastTile.sourceID;\n    \n    //if you want to change the properties of the tile in the response, edit these, otherwise \n    //they will take values from the source tile\n    \n    title =         tile.tileConfig.title; \n    tileType =      tile.tileType;\n    tileID  =       tile.tileID;\n    subtitle =      tile.tileConfig.subtitle;  \n    icon =          tile.tileConfig.icon;\n    taskerCommand = tile.taskerCommand;\n    extra =         tile.extra;\n    rangeMin =      tile.tileConfig.range.min;\n    rangeMax =      tile.tileConfig.range.max;\n    rangeStep =     tile.tileConfig.range.step;\n    rangeFormat =   tile.tileConfig.range.format;\n    config =        tile.tileConfig;\n    \n    //checks for inputs from various dashboard elements\n  \n    if(tileType === \"button\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n        if(toggleState === true){\n            icon = tile.tileConfig.icon.on;\n            subtitle = \"online\";\n        }\n        if(toggleState === false){\n            icon = tile.tileConfig.icon.off;\n            subtitle = \"offline\";\n        }\n    }\n    \n    if(tileType === \"toggle\"){\n        toggleState =   msg.payload;\n        rangeCurrent =  tile.rangeState;\n        \n            // toggling icons on tile\n        if(toggleState=== true){\n            icon =          tile.tileConfig.icon.on;\n        } \n        if(toggleState=== false){\n            icon =          tile.tileConfig.icon.off;\n        }\n    }\n    \n    if(tileType === \"range\"){\n        toggleState =   tile.toggleState;\n        rangeCurrent =  msg.payload;\n    }\n    \n    if(tileType === \"rangeToggle\"){\n        if(msg.payload === true){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.on;\n        } \n        if(msg.payload === false){\n            toggleState = msg.payload;\n            rangeCurrent =   tile.rangeState;\n            icon = tile.tileConfig.icon.off;\n        }\n        if(isNumeric(msg.payload)){\n            node.warn(\"triggered nums \" + msg.payload);\n            rangeCurrent =  msg.payload;\n            toggleState =   true;\n            icon = tile.tileConfig.icon.on;\n            \n        }\n    }\n    \n    //save changes made via nodeRED and update the context\n    command = taskerCommand +\":::\"+ tileID +\":::\"+ JSON.stringify(config);\n    \n    var data = {\"extra\": extra,\n                \"sourceID\": sourceID,\n                \"taskerCommand\": taskerCommand,\n                \"tileType\": tileType,\n                \"tileID\": tileID,\n                \"tileConfig\": config,\n                \"toggleState\": toggleState,\n                \"rangeState\": rangeCurrent,\n                \"command\" : command\n            };\n    flow.set(tileID, data);\n    \n}\n\n\n//send join push\n\ncomm = \"TileUpdate\"+\"=:=\"+ tileType +\"=:=\"+ tileID +\"=:=\"+ title +\"=:=\"+ subtitle +\"=:=\"+ icon +\"=:=\"+ command+\"=:=\"+toggleState +\"=:=\"+ rangeMin+ \"=:=\"+ rangeMax +\"=:=\"+ rangeCurrent +\"=:=\"+rangeStep+\"=:=\"+ rangeFormat;\n\nmsg.push = {\"devices\" : sourceID, \"text\": comm};\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"///Visit https://joinjoaomgcd.appspot.com/ to get your Join API ID\n\n","finalize":"","libs":[],"x":980,"y":120,"wires":[["5a611cff.625d64"]]},{"id":"43941603.703878","type":"function","z":"86d6d8a3.11c8f8","name":"Settings","func":"// see on dtart tab for details\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n\nvar switchTile = {\"tiletype\": \"rangeToggle\",  //button|range|rangeToggle|toggle\n                  \"tileID\": \"thermostat\",     //id of the tile (must be unique)\n                  \"sourceID\": \"Mi11\"};        //names of Join devices to synct tiles\nflow.set(\"thermostat\", switchTile);           //set tileID here for flow variable\n\n\n","finalize":"","libs":[],"x":220,"y":60,"wires":[[]]},{"id":"f4a58de5.6086c","type":"join-receive-message","z":"86d6d8a3.11c8f8","name":"","command":"PT","variables":"extra,taskerCommand,tileID,config,tileStatus","parseNumbers":true,"server":"bb9737a3.bbb4d8","x":230,"y":120,"wires":[["861eeaaa.34a6c8"]]},{"id":"861eeaaa.34a6c8","type":"switch","z":"86d6d8a3.11c8f8","name":"TileID","property":"payload.tileID","propertyType":"msg","rules":[{"t":"eq","v":"thermostat","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":370,"y":120,"wires":[["1b174778.acaf99"]]},{"id":"5a611cff.625d64","type":"join-message","z":"86d6d8a3.11c8f8","name":"","text":"","title":"","url":"","notificationicon":"","joinConfig":"1c0401ee.9b9bfe","x":1220,"y":120,"wires":[[]]},{"id":"bb9737a3.bbb4d8","type":"join-server","name":"NodeRED","port":"1820","joinConfig":"1c0401ee.9b9bfe"},{"id":"1c0401ee.9b9bfe","type":"join-config","name":"Join Config","register":true}]
